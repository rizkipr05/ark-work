generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===================== User & Admin ===================== */
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  passwordHash String
  photoUrl     String?
  cvUrl        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  sessions     Session[]
}

model Admin {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

/* ===================== Tender ===================== */
enum Sector {
  OIL_GAS
  RENEWABLE_ENERGY
  UTILITIES
  ENGINEERING
}

enum Status {
  OPEN
  PREQUALIFICATION
  CLOSED
}

enum Contract {
  EPC
  SUPPLY
  CONSULTING
  MAINTENANCE
}

model Tender {
  id          Int      @id @default(autoincrement())
  title       String
  buyer       String
  sector      Sector
  location    String
  status      Status
  contract    Contract
  budgetUSD   Int
  deadline    DateTime
  teamSlots   Int
  description String
  documents   String[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/* ===================== Employer ===================== */
model Employer {
  id             String                @id @default(uuid()) @db.Uuid
  slug           String                @unique
  legalName      String                @map("legal_name")
  displayName    String                @map("display_name")
  website        String?
  status         EmployerStatus        @default(draft)
  isVerified     Boolean               @default(false) @map("is_verified")
  createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  onboardingStep OnboardingStep        @default(PACKAGE) @map("onboarding_step")
  admins         EmployerAdminUser[]
  contacts       EmployerContact[]
  metas          EmployerMeta[]
  offices        EmployerOffice[]
  profile        EmployerProfile?
  jobs           Job[]
  payments       Payment[]
  sessions       Session[]
  subscriptions  Subscription[]
  verifications  VerificationRequest[]

  @@map("employers")
}

model EmployerProfile {
  id          String       @id @default(uuid()) @db.Uuid
  employerId  String       @unique @map("employer_id") @db.Uuid
  industry    String?
  size        CompanySize?
  foundedYear Int?         @map("founded_year")
  about       String?
  logoUrl     String?      @map("logo_url")
  bannerUrl   String?      @map("banner_url")
  hqCity      String?      @map("hq_city")
  hqCountry   String?      @map("hq_country")
  linkedin    String?
  twitter     String?
  instagram   String?
  facebook    String?
  youtube     String?
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  employer    Employer     @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@map("employer_profiles")
}

model EmployerAdminUser {
  id           String    @id @default(uuid()) @db.Uuid
  employerId   String    @map("employer_id") @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  fullName     String?   @map("full_name")
  phone        String?
  isOwner      Boolean   @default(true) @map("is_owner")
  agreedTosAt  DateTime? @map("agreed_tos_at")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  employer     Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@index([employerId])
  @@map("employer_admin_users")
}

model EmployerOffice {
  id          String   @id @default(uuid()) @db.Uuid
  employerId  String   @map("employer_id") @db.Uuid
  label       String?
  address1    String?  @map("address1")
  address2    String?  @map("address2")
  city        String?
  state       String?
  postalCode  String?  @map("postal_code")
  country     String?
  lat         Float?
  lng         Float?
  isRemoteHub Boolean  @default(false) @map("is_remote_hub")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  employer    Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@index([employerId])
  @@map("employer_offices")
}

model EmployerContact {
  id         String   @id @default(uuid()) @db.Uuid
  employerId String   @map("employer_id") @db.Uuid
  fullName   String   @map("full_name")
  role       String?
  email      String?
  phone      String?
  isPrimary  Boolean  @default(false) @map("is_primary")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  employer   Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@index([employerId])
  @@map("employer_contacts")
}

model EmployerMeta {
  id         String   @id @default(uuid()) @db.Uuid
  employerId String   @map("employer_id") @db.Uuid
  key        String
  value      String?
  employer   Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@unique([employerId, key])
  @@map("employer_meta")
}

/* ===================== Plans / Payments ===================== */
model Plan {
  id            String         @id @default(uuid()) @db.Uuid
  slug          String         @unique
  name          String
  description   String?
  currency      String         @default("IDR")
  interval      String         @default("month")
  amount        BigInt
  active        Boolean        @default(true)
  priceId       String?
  payments      Payment[]
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                 String             @id @default(uuid()) @db.Uuid
  employerId         String             @map("employer_id") @db.Uuid
  planId             String             @map("plan_id") @db.Uuid
  providerId         String?            @map("provider_id")
  status             String             @default("active")
  currentPeriodStart DateTime?          @map("current_period_start")
  currentPeriodEnd   DateTime?          @map("current_period_end")
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  items              SubscriptionItem[]
  employer           Employer           @relation(fields: [employerId], references: [id], onDelete: Cascade)
  plan               Plan               @relation(fields: [planId], references: [id])

  @@index([employerId])
  @@map("subscriptions")
}

model SubscriptionItem {
  id             String       @id @default(uuid()) @db.Uuid
  subscriptionId String       @map("subscription_id") @db.Uuid
  name           String
  quantity       Int          @default(1)
  metadata       Json?
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@map("subscription_items")
}

model Payment {
  id            String    @id @default(uuid()) @db.Uuid
  orderId       String    @unique @map("order_id")
  planId        String?   @map("plan_id") @db.Uuid
  employerId    String?   @map("employer_id") @db.Uuid
  userId        String?
  currency      String    @default("IDR")
  grossAmount   BigInt    @map("gross_amount")
  method        String?
  status        String    @default("pending")
  transactionId String?   @map("transaction_id")
  fraudStatus   String?   @map("fraud_status")
  meta          Json?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  redirectUrl   String?   @map("redirect_url")
  token         String?   @map("token")
  employer      Employer? @relation(fields: [employerId], references: [id], onDelete: Cascade)
  plan          Plan?     @relation(fields: [planId], references: [id])

  @@index([planId])
  @@index([employerId])
  @@map("payments")
}

/* ===================== Jobs ===================== */
model Job {
  id          String   @id @default(uuid()) @db.Uuid
  employerId  String   @map("employer_id") @db.Uuid
  title       String
  description String?
  location    String?
  employment  String?
  isDraft     Boolean  @default(true) @map("is_draft")
  isActive    Boolean  @default(false) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  employer    Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@index([employerId, isActive])
  @@map("jobs")
}

/* ===================== Verification ===================== */
model VerificationRequest {
  id         String             @id @default(uuid()) @db.Uuid
  employerId String             @map("employer_id") @db.Uuid
  status     VerificationStatus @default(pending)
  note       String?
  createdAt  DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  reviewedAt DateTime?          @map("reviewed_at")
  files      VerificationFile[]
  employer   Employer           @relation(fields: [employerId], references: [id], onDelete: Cascade)
  tokens     VerifyToken[]

  @@index([employerId, status])
  @@map("verification_requests")
}

model VerificationFile {
  id             String              @id @default(uuid()) @db.Uuid
  verificationId String              @map("verification_id") @db.Uuid
  fileUrl        String              @map("file_url")
  fileType       String?             @map("file_type")
  uploadedAt     DateTime            @default(now()) @map("uploaded_at") @db.Timestamptz(6)
  verification   VerificationRequest @relation(fields: [verificationId], references: [id], onDelete: Cascade)

  @@map("verification_files")
}

model VerifyToken {
  id             String              @id @default(uuid()) @db.Uuid
  verificationId String              @map("verification_id") @db.Uuid
  type           String
  token          String              @unique
  expiresAt      DateTime            @map("expires_at")
  usedAt         DateTime?           @map("used_at")
  verification   VerificationRequest @relation(fields: [verificationId], references: [id], onDelete: Cascade)

  @@map("verify_tokens")
}

/* ===================== Sessions ===================== */
model Session {
  id         String    @id @default(cuid())
  userId     String?   // optional
  employerId String?   @db.Uuid
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  lastSeenAt DateTime  @default(now()) @db.Timestamptz(6)
  ip         String?
  userAgent  String?
  revokedAt  DateTime?

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employer Employer? @relation(fields: [employerId], references: [id])

  @@index([userId])
  @@index([employerId])
  @@index([revokedAt])
  @@map("sessions")
}

/* ===================== Enums lainnya ===================== */
enum EmployerStatus {
  draft
  active
  suspended
  archived

  @@map("employer_status")
}

enum CompanySize {
  S1_10       @map("1-10")
  S11_50      @map("11-50")
  S51_200     @map("51-200")
  S201_500    @map("201-500")
  S501_1000   @map("501-1000")
  S1001_5000  @map("1001-5000")
  S5001_10000 @map("5001-10000")
  S10000_PLUS @map("10000+")

  @@map("company_size")
}

enum VerificationStatus {
  pending
  approved
  rejected

  @@map("verification_status")
}

enum OnboardingStep {
  PACKAGE
  JOB
  VERIFY
  DONE

  @@map("onboarding_step")
}
